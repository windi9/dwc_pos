# dwc_pos/app/schemas/auth.py

from pydantic import BaseModel, EmailStr, Field
from typing import Optional

class Token(BaseModel):
    access_token: str
    token_type: str = "bearer"
    # Optional: Add expires_in if frontend needs to know token expiry
    # expires_in: int # seconds

class TokenData(BaseModel):
    username: Optional[str] = None
    scopes: list[str] = [] # Optional: For defining specific permissions within the token

class UserLogin(BaseModel):
    username_or_email: str = Field(..., example="john_doe" or "john@example.com")
    password: str = Field(..., example="secure_password_123")

class UserRegister(BaseModel):
    username: str = Field(..., example="newuser")
    email: EmailStr = Field(..., example="newuser@example.com")
    password: str = Field(..., example="StrongP@ssw0rd")
    phone_number: Optional[str] = Field(None, example="+628123456789")
    full_name: Optional[str] = Field(None, example="New User Full Name")
    # PIN will be generated by backend and sent to user or set by user later

class VerificationCodeRequest(BaseModel):
    email: EmailStr = Field(..., example="user@example.com")

class VerifyEmailLink(BaseModel):
    token: str = Field(..., example="a_long_generated_token_from_email_link")

class VerifyLoginCode(BaseModel):
    email: EmailStr = Field(..., example="user@example.com")
    code: str = Field(..., min_length=6, max_length=6, example="123456")

class UserPinLogin(BaseModel):
    username_or_email: str = Field(..., example="cashier_user" or "cashier@example.com")
    pin: str = Field(..., min_length=6, max_length=6, example="543210")